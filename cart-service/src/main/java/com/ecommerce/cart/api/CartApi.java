/**
 * 
 */
package com.ecommerce.cart.api;

import com.ecommerce.cart.entity.Cart;
import com.ecommerce.cart.entity.User;
import com.ecommerce.cart.repository.CartRepository;
import com.ecommerce.cart.repository.UserRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.List;
import java.util.logging.Logger;


/**
 * @author chinnb
 *
 */

@RestController
public class CartApi {

	
	protected Logger logger = Logger.getLogger(CartApi.class.getName());
	Boolean isMongoDb = false;
	List<Cart> carts;
	// This means to get the bean called userRepository
    // Which is auto-generated by Spring, we will use it to handle the data
	@Autowired
	private CartRepository cartRepository;
	@Autowired
	private UserRepository userRepository;
	
	public CartApi() {
//		ResourceBundle bundle = ResourceBundle.getBundle("config"); //creates bundle from file `config.properties`
		
		carts = new ArrayList<>();
		
		carts.add(new Cart(10, 100, new BigDecimal(299.99), 1));
		carts.add(new Cart(20, 200, new BigDecimal(599.99), 2));
		carts.add(new Cart(30, 300, new BigDecimal(399.99), 3));
	}
	
	
	@RequestMapping("/cart")
	public List<Cart> findAll() {
		logger.info("############################ Cart.findAll() ################################### ");
//		return carts;
		carts = new ArrayList<>();
		Iterable<Cart> cartsIt = cartRepository.findAll();
		cartsIt.forEach(carts::add);
		return carts;
	}
	
	@RequestMapping("/cart/user/{user_name}")
	public User findByUserName(@PathVariable("user_name") String userName) {
		logger.info("############################ Cart.find by user id() ################################### ");
		userName = "".equals(userName) ? "bala" : userName;
		User userWithCart = userRepository.findByName(userName);
		return userWithCart;
	}
	
//	@RequestMapping("/cart/{uid}")
//	public List<Cart> findByUserId(@PathVariable("uid") int uId) {
//		logger.info("############################ Cart.find by user id() ################################### ");
////		return carts;
//		carts = new ArrayList<>();
//		Iterable<Cart> cartsIt = cartRepository.findByUid(uId);
//		cartsIt.forEach(carts::add);
//		return carts;
//	}
	
//	@RequestMapping("/cart/user/{uid}")
//	public User findByUserId(@PathVariable("uid") int uId) {
//		logger.info("############################ Cart.find by user id() ################################### ");
////		return carts;
//		List<User> users = new ArrayList<>();
//		uId = uId > 0 ? uId : 1;
//		User userWithCart = userRepository.findById(uId);
////		Iterable<User> cartByUser = userRepository.findAll();
////		cartByUser.forEach(user -> {user.getCart().forEach(cart -> System.out.println("cart: "+cart.getPrice()));});
////		cartByUser.forEach(user -> user.setCart(user.getCart()));
////		for(User user : cartByUser) {
////			Set<Cart> cart = user.getCart();
////			System.out.println("cart size: "+cart.size());
////			cart.forEach(value -> System.out.println("cart data: "+value.getQuantity()));
////			user.setCart(cart);
////			users.add(user);
////		}
////		cartByUser.forEach(users::add);
////		return users;
//		return userWithCart;
//	}
	
	
	
//	@RequestMapping(value="/products/", method = RequestMethod.POST)
//	@CachePut(value = "allproducts")
//	public void updateProduct(@RequestBody Product product) {
//		System.out.println("updating product");
//		if(isMongoDb) {
//			Product productOrgnl = productRepo.findByName(product.getName());
//			productOrgnl.setPrice(product.getPrice());
//			productRepo.save(product);
//		}
//		
//	}
//	
//	@RequestMapping("/company")
//	public List<Company> findAllCompanies() {
//		List<Company> companies = null;
//		System.out.println("############################ Product.findAllCompanies() ###################################");
//		logger.info("############################ Product.findAllCompanies() ###################################");
//		List<Users> users = new ArrayList<Users>();
//		try {
//			mongoOperations();
//			companies = companyRepo.findAll();
//		} catch (Exception e) {
//			// TODO Auto-generated catch block
//			e.printStackTrace();
//		}
//		
//		return companies;
//	}
//	
//	public void mongoOperations() throws Exception {
//		// clear database
//		System.out.println("==========Delete all company entities==========");
//		companyRepo.deleteAll();
//		
//		// save Documents to MongoDB
//		System.out.println("==========Save list of company entities==========");
//		companyRepo.save(Arrays.asList(
//				// Apple company & products
//				new Company(1, "Apple",
//						
//						        // list of products
//								Arrays.asList(new Product("A-123", "Iphone 7", new BigDecimal(649.00).setScale(2, BigDecimal.ROUND_HALF_EVEN),"FREE shipping"),
//													  new Product("A-456", "IPadPro", new BigDecimal( 417.67).setScale(2, BigDecimal.ROUND_HALF_EVEN), "FREE shipping")),
//								
//								// contact
//								new Contact("Cupertino, CA 95014", "1-408-996-1010")),
//				
//				// Samsung company & products
//				new Company(2, "Samsung",
//						
//						       // list of products
//						       Arrays.asList(new Product("S-012", "GalaxyJ7", new BigDecimal(219.00).setScale(2, BigDecimal.ROUND_HALF_EVEN), "FREE shipping"),
//														new Product("S-456", "GalaxyTabA", new BigDecimal(299.99).setScale(2, BigDecimal.ROUND_HALF_EVEN), " FREE shipping")),
//						       
//						       // contact
//						       new Contact("Seocho District, Seoul, South Korea", "+82-2-2053-3000"))));
//		// initial List Companies variable
//		List<Company> companies = null;
//		
//		// fetch all documents
//		System.out.println("==========Fetch aLL companies:==========");
//		companies = companyRepo.findAll();
//		companies.forEach(System.out::println);
//		
//		// find Company by name
//		System.out.println("==========Find a company by name:==========");
//		companies = companyRepo.findByName("Samsung");
//		companies.forEach(System.out::println);
//		
//		// find Company by address
//		System.out.println("==========Find a company by address:==========");
//		companies = companyRepo.findByAddress("Cupertino, CA 95014");
//		companies.forEach(System.out::println);
//	}
	
}

